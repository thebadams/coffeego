// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const createCoffee = `-- name: CreateCoffee :one
INSERT INTO coffees(
name, roaster_id

) VALUES (
?, ?
	)
RETURNING id, name, roaster_id
`

type CreateCoffeeParams struct {
	Name      string
	RoasterID int64
}

func (q *Queries) CreateCoffee(ctx context.Context, arg CreateCoffeeParams) (Coffee, error) {
	row := q.db.QueryRowContext(ctx, createCoffee, arg.Name, arg.RoasterID)
	var i Coffee
	err := row.Scan(&i.ID, &i.Name, &i.RoasterID)
	return i, err
}

const createRoaster = `-- name: CreateRoaster :one
INSERT INTO roasters(
name
) VALUES (
?
	)
RETURNING id, name
`

func (q *Queries) CreateRoaster(ctx context.Context, name string) (Roaster, error) {
	row := q.db.QueryRowContext(ctx, createRoaster, name)
	var i Roaster
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const findRoasterByName = `-- name: FindRoasterByName :one
SELECT id, name from roasters
WHERE name = ? LIMIT 1
`

func (q *Queries) FindRoasterByName(ctx context.Context, name string) (Roaster, error) {
	row := q.db.QueryRowContext(ctx, findRoasterByName, name)
	var i Roaster
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listCoffees = `-- name: ListCoffees :many
SELECT name from coffees
ORDER BY name
`

func (q *Queries) ListCoffees(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listCoffees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
